{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mkboa/AI_Dev/Polling-App-Project/polling-app-project/src/app/api/polls/route.ts"],"sourcesContent":["import { createRouteHandlerClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { NextResponse } from \"next/server\";\n\nexport async function GET() {\n  const supabase = createRouteHandlerClient({ cookies });\n\n  // Get all polls\n  const { data: pollsData, error: pollsError } = await supabase\n    .from(\"polls\")\n    .select(\"*\")\n    .order(\"created_at\", { ascending: false });\n\n  if (pollsError) {\n    console.error(\"Error fetching polls:\", pollsError);\n    return NextResponse.json({ error: pollsError.message }, { status: 500 });\n  }\n\n  // Get all poll options\n  const { data: optionsData, error: optionsError } = await supabase\n    .from(\"poll_options\")\n    .select(\"*\");\n\n  if (optionsError) {\n    console.error(\"Error fetching poll options:\", optionsError);\n    return NextResponse.json({ error: optionsError.message }, { status: 500 });\n  }\n\n  // Transform the data to match the Poll interface\n  const polls = pollsData.map((poll) => {\n    const pollOptions = optionsData\n      .filter((option) => option.poll_id === poll.id)\n      .map((option) => ({\n        id: option.id,\n        text: option.text,\n        votes: option.votes || 0,\n      }));\n\n    const totalVotes = pollOptions.reduce((sum, option) => sum + option.votes, 0);\n\n    return {\n      id: poll.id,\n      title: poll.title,\n      description: poll.description || \"\",\n      options: pollOptions,\n      totalVotes,\n      createdAt: poll.created_at,\n      createdBy: poll.created_by || \"Anonymous\",\n      endsAt: poll.ends_at,\n      isActive: true,\n    };\n  });\n\n  return NextResponse.json(polls);\n}\n\nexport async function POST(request: Request) {\n  const supabase = createRouteHandlerClient({ cookies });\n  const { data: { user } } = await supabase.auth.getUser();\n\n  if (!user) {\n    return NextResponse.json({ error: \"You must be logged in to create a poll.\" }, { status: 401 });\n  }\n\n  const { title, description, options, ends_at } = await request.json();\n\n  if (!title || options.length < 2) {\n    return NextResponse.json({ error: \"Title and at least 2 options are required.\" }, { status: 400 });\n  }\n\n  const pollData: { title: string; description?: string; created_by: string, ends_at?: string } = {\n    title,\n    description,\n    created_by: user.id,\n  };\n\n  if (ends_at) {\n    pollData.ends_at = ends_at;\n  }\n\n  const { data: poll, error: pollError } = await supabase\n    .from(\"polls\")\n    .insert([pollData])\n    .select()\n    .single();\n\n  if (pollError || !poll) {\n    return NextResponse.json({ error: pollError?.message || \"Failed to create poll\" }, { status: 500 });\n  }\n\n  const rows = options.map((text: string) => ({ poll_id: poll.id, text }));\n  const { error: optionsError } = await supabase.from(\"poll_options\").insert(rows);\n  if (optionsError) {\n    return NextResponse.json({ error: optionsError.message }, { status: 500 });\n  }\n\n  return NextResponse.json(poll);\n}"],"names":[],"mappings":"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","debugId":null}}]
}