{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mkboa/AI_Dev/Polling-App-Project/polling-app-project/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,sKAAO,EAAC,IAAA,6IAAI,EAAC;AACtB","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mkboa/AI_Dev/Polling-App-Project/polling-app-project/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\"\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }\r\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;;;;;;AAEA,MAAM,iBAAiB,IAAA,uKAAG,EACxB,0RACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,mNAAgB,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,wKAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,IAAA,yHAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mkboa/AI_Dev/Polling-App-Project/polling-app-project/src/components/polls/poll-card.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const PollCard = registerClientReference(\n    function() { throw new Error(\"Attempted to call PollCard() from the server but PollCard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/polls/poll-card.tsx <module evaluation>\",\n    \"PollCard\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,wQAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,oEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mkboa/AI_Dev/Polling-App-Project/polling-app-project/src/components/polls/poll-card.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const PollCard = registerClientReference(\n    function() { throw new Error(\"Attempted to call PollCard() from the server but PollCard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/polls/poll-card.tsx\",\n    \"PollCard\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,wQAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,gDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mkboa/AI_Dev/Polling-App-Project/polling-app-project/src/lib/api.ts"],"sourcesContent":["import { Poll, CreatePollData, VoteData, AuthResponse, User } from \"@/types/poll\"\n\nconst API_BASE_URL = typeof window === 'undefined' ? 'http://localhost:3000/api' : '/api'\n\nclass ApiError extends Error {\n  constructor(public status: number, message: string) {\n    super(message)\n    this.name = 'ApiError'\n  }\n}\n\nasync function apiRequest<T>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const url = `${API_BASE_URL}${endpoint}`\n  \n  const headers: HeadersInit = {\n    'Content-Type': 'application/json',\n    ...options.headers,\n  }\n\n  const config: RequestInit = {\n    ...options,\n    headers,\n  }\n\n  const response = await fetch(url, config)\n  \n  if (!response.ok) {\n    const errorBody = await response.text()\n    try {\n      const errorJson = JSON.parse(errorBody)\n      throw new ApiError(response.status, errorJson.message || `API request failed: ${response.statusText}`)\n    } catch {\n      throw new ApiError(response.status, `API request failed: ${response.statusText} - ${errorBody}`)\n    }\n  }\n\n  // Handle cases where response might be empty\n  const text = await response.text()\n  try {\n    return JSON.parse(text) as T\n  } catch (e) {\n    // If parsing fails, and text is empty, return null or an empty object\n    // depending on what the caller expects. For a POST that returns nothing, this is fine.\n    if (text === '') {\n      return null as T\n    }\n    throw new Error(`Failed to parse JSON response: ${e}`)\n  }\n}\n\n// Authentication API\nexport const authApi = {\n  login: async (email: string, password: string): Promise<AuthResponse> => {\n    return apiRequest<AuthResponse>('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    })\n  },\n\n  register: async (name: string, email: string, password: string): Promise<AuthResponse> => {\n    return apiRequest<AuthResponse>('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify({ name, email, password }),\n    })\n  },\n\n  logout: async (): Promise<void> => {\n    return apiRequest<void>('/auth/logout', {\n      method: 'POST',\n    })\n  },\n\n  getCurrentUser: async (): Promise<User> => {\n    return apiRequest<User>('/auth/me', {})\n  },\n}\n\n// Polls API\nexport const pollsApi = {\n  getAll: async (): Promise<Poll[]> => {\n    return apiRequest<Poll[]>('/polls')\n  },\n\n  create: async (pollData: CreatePollData): Promise<Poll> => {\n    return apiRequest<Poll>('/polls', {\n      method: 'POST',\n      body: JSON.stringify(pollData),\n    })\n  },\n\n  vote: async (voteData: VoteData): Promise<Poll> => {\n    return apiRequest<Poll>('/polls/vote', {\n      method: 'POST',\n      body: JSON.stringify(voteData),\n    })\n  },\n}\n\n\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,eAAe,uCAAgC,8BAA8B;AAEnF,MAAM,iBAAiB;;IACrB,YAAY,AAAO,MAAc,EAAE,OAAe,CAAE;QAClD,KAAK,CAAC,eADW,SAAA;QAEjB,IAAI,CAAC,IAAI,GAAG;IACd;AACF;AAEA,eAAe,WACb,QAAgB,EAChB,UAAuB,CAAC,CAAC;IAEzB,MAAM,MAAM,GAAG,eAAe,UAAU;IAExC,MAAM,UAAuB;QAC3B,gBAAgB;QAChB,GAAG,QAAQ,OAAO;IACpB;IAEA,MAAM,SAAsB;QAC1B,GAAG,OAAO;QACV;IACF;IAEA,MAAM,WAAW,MAAM,MAAM,KAAK;IAElC,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,YAAY,MAAM,SAAS,IAAI;QACrC,IAAI;YACF,MAAM,YAAY,KAAK,KAAK,CAAC;YAC7B,MAAM,IAAI,SAAS,SAAS,MAAM,EAAE,UAAU,OAAO,IAAI,CAAC,oBAAoB,EAAE,SAAS,UAAU,EAAE;QACvG,EAAE,OAAM;YACN,MAAM,IAAI,SAAS,SAAS,MAAM,EAAE,CAAC,oBAAoB,EAAE,SAAS,UAAU,CAAC,GAAG,EAAE,WAAW;QACjG;IACF;IAEA,6CAA6C;IAC7C,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,IAAI;QACF,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAO,GAAG;QACV,sEAAsE;QACtE,uFAAuF;QACvF,IAAI,SAAS,IAAI;YACf,OAAO;QACT;QACA,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,GAAG;IACvD;AACF;AAGO,MAAM,UAAU;IACrB,OAAO,OAAO,OAAe;QAC3B,OAAO,WAAyB,eAAe;YAC7C,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAO;YAAS;QACzC;IACF;IAEA,UAAU,OAAO,MAAc,OAAe;QAC5C,OAAO,WAAyB,kBAAkB;YAChD,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAM;gBAAO;YAAS;QAC/C;IACF;IAEA,QAAQ;QACN,OAAO,WAAiB,gBAAgB;YACtC,QAAQ;QACV;IACF;IAEA,gBAAgB;QACd,OAAO,WAAiB,YAAY,CAAC;IACvC;AACF;AAGO,MAAM,WAAW;IACtB,QAAQ;QACN,OAAO,WAAmB;IAC5B;IAEA,QAAQ,OAAO;QACb,OAAO,WAAiB,UAAU;YAChC,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;IACF;IAEA,MAAM,OAAO;QACX,OAAO,WAAiB,eAAe;YACrC,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;IACF;AACF","debugId":null}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mkboa/AI_Dev/Polling-App-Project/polling-app-project/src/app/polls/page.tsx"],"sourcesContent":["import { Button } from \"@/components/ui/button\"\nimport { PollCard } from \"@/components/polls/poll-card\"\nimport Link from \"next/link\"\nimport { pollsApi } from \"@/lib/api\"\n\nexport default async function PollsPage() {\n  const polls = await pollsApi.getAll()\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">All Polls</h1>\n            <p className=\"mt-2 text-gray-600\">\n              Browse and vote on polls created by the community\n            </p>\n          </div>\n          <Link href=\"/polls/create\">\n            <Button>Create New Poll</Button>\n          </Link>\n        </div>\n\n        <div className=\"space-y-6\">\n          {polls.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                No polls available\n              </h3>\n              <p className=\"text-gray-600 mb-4\">\n                Be the first to create a poll!\n              </p>\n              <Link href=\"/polls/create\">\n                <Button>Create Your First Poll</Button>\n              </Link>\n            </div>\n          ) : (\n            polls.map(poll => (\n              <PollCard \n                key={poll.id} \n                poll={poll} \n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;;AAEe,eAAe;IAC5B,MAAM,QAAQ,MAAM,6HAAQ,CAAC,MAAM;IAEnC,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;;8CACC,8OAAC;oCAAG,WAAU;8CAAmC;;;;;;8CACjD,8OAAC;oCAAE,WAAU;8CAAqB;;;;;;;;;;;;sCAIpC,8OAAC,uKAAI;4BAAC,MAAK;sCACT,cAAA,8OAAC,4IAAM;0CAAC;;;;;;;;;;;;;;;;;8BAIZ,8OAAC;oBAAI,WAAU;8BACZ,MAAM,MAAM,KAAK,kBAChB,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAyC;;;;;;0CAGvD,8OAAC;gCAAE,WAAU;0CAAqB;;;;;;0CAGlC,8OAAC,uKAAI;gCAAC,MAAK;0CACT,cAAA,8OAAC,4IAAM;8CAAC;;;;;;;;;;;;;;;;+BAIZ,MAAM,GAAG,CAAC,CAAA,qBACR,8OAAC,uJAAQ;4BAEP,MAAM;2BADD,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;AAS5B","debugId":null}}]
}